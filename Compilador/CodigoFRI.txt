j main 


wait:
    // waiting led
    set x29 1 

    // Wait for the start switch
    // Switches 001: start case b=N, 011: start case b<N, 111: b>N
    // Note: N=16
    set x6 1 
    set x7 3 
    set x8 5 

    comp x30 x6 
    jeq fir1 
    //comp x30 x7 
    //jeq fir2 
    //comp x30 x8 
    //jeq fir3 
    j wait 

fir1:

    //Start counting Cicle/Instructions
    set x23 1 
    // fir case b=N led
    set x29 2 

    // counters
    // n = 0 for vectors x9: Vector mem counter 
    set x9 0 
    // n = 0 for scalars x11: Scalar mem counter 
    set x11 0  
    // n = 16 
    set x3 16 

    // load vector for arithmetics shifts
    // offset of 16 bytes (due to data size) x1: Vector 8's 
    lv x1 x21 1 
    // load vector b
    // offset of 16 bytes (due to shifts vector) x2: Vector b = N
    lv x2 x21 2 



fir1_loop:

    // offset of 4*16 bytes
    addi x10 x9 4 
    // offset of 64 bytes
    addi x12 x11 64 

    // load vector x
    // offset of 32 bytes (due to vector b=n size and vector b<n size)
    // x[n]...x[n+15] x3: X
    lv x3 x10 0 

    // y[n]...y[n+15] = b[n] * x[n]...b[n+15] * x[n+15]
    mvv x4 x2 x3 
    sva x4 x4 x1 

    // offset to result file for vectors
    // this x4 is the scalar register
    //add x10 x10 x0 

    // offset to result file for scalars
    //add x12 x12 x0 

    // stores result value
    // this x4 is the vectorial register, save X * b Vector
    sv x4 x10 0 
    // Esto se hace para acceder al ultimo resultado del ciclo anterior y poder sumarlo
    //subi x2 x12 1 
    //Se inicializa el contador para el ciclo de calculo de los y
    addi x5 x21 1 

    lw x13 x12 0 
    sw x13 x12 0 

loop_y:

    //y[n] = y[n-1] + y_intermedio[n]
    lw x13 x12 0 
    lw x14 x12 1 
    add x14 x14 x13 
    sw x14 x12 1 
    // Se aumenta el indice de y[n-1]
    // addi x2 x2 1 
    // Se aumenta el indice de y[n]
    addi x12 x12 1 
    // Se aumenta el contador de muestras
    addi x5 x5 1 
    // x3 es igual 16
    comp x5 x3 
    jlt loop_y 

    // n++     x9: Contador indice vectores
    addi x9 x9 1 
    // n++     x11: Contador indice escalares
    addi x11 x11 16 

    // n < size 
    comp x11 x1 
    jlt fir1_loop 

finished:

    //End counting Cycles/Instructions
    set x23 0 

    // Guarde el reg 24 en la posicion 6 
    // Guarde el reg 25 en la posicion 7 
    // Guarde el reg 27 en la posicion 8 
    // Guarde el reg 28 en la posicion 9 
    // Guarde el reg 29 en la posicion 10 

    // turn on leds
    set x29 255 

    // Wait for the switches
    set x6 0 
    set x7 2 
    set x8 4 

    comp x30 x6 
    jeq wait 
    comp x30 x7 
    jeq wait 
    comp x30 x8 
    jeq wait 
    comp x30 x8 
    jneq finished 

// fir2:

// fir3:

main:
    // turn off leds
    set x29 0 

    // File size saved in x1
    lw x1 x0 0 
    lw x2 x0 1 
    lw x3 x0 2 
    slli x1 x1 24 
    slli x2 x2 24 
    slli x3 x3 24 
    slri x1 x1 24 
    slri x2 x2 16 
    slri x3 x3 8 
    add x1 x1 x2 
    // Result file address for scalars x1: Sample size
    add x1 x1 x3 

    // File size saved in x4 
    lw x4 x0 3 
    lw x5 x0 4 
    slli x4 x4 24 
    slli x5 x5 24 
    slri x4 x4 24 
    slri x5 x5 16 
    // Result file address for vectors x4: Sample size / 16
    add x4 x4 x5 

    j wait 
